services:
  orders:
    build:
      context: .
      dockerfile: ./apps/orders/Dockerfile
      target: development
    container_name: orders
    command: npm run start:dev orders
    env_file:
      - ./apps/orders/.env
    depends_on:
      - mongo
      - rabbitmq
      - billing
      - inventory
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    develop:
      watch:
        - path: ./apps/orders
          target: /usr/src/app/apps/orders
          action: sync

  inventory:
    build:
      context: .
      dockerfile: ./apps/inventory/Dockerfile
      target: development
    container_name: inventory
    command: npm run start:dev inventory
    env_file:
      - ./apps/inventory/.env
    depends_on:
      - mongo
      - rabbitmq
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3001:3001'
    develop:
      watch:
        - path: ./apps/inventory
          target: /usr/src/app/apps/inventory
          action: sync

  billing:
    build:
      context: .
      dockerfile: ./apps/billing/Dockerfile
      target: development
    container_name: billing
    command: npm run start:dev billing
    env_file:
      - ./apps/billing/.env
    depends_on:
      - mongo
      - rabbitmq
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3002:3002'
    develop:
      watch:
        - path: ./apps/billing
          target: /usr/src/app/apps/billing
          action: sync

  shipping:
    build:
      context: .
      dockerfile: ./apps/shipping/Dockerfile
      target: development
    container_name: shipping
    command: npm run start:dev shipping
    env_file:
      - ./apps/shipping/.env
    depends_on:
      - mongo
      - rabbitmq
    volumes:
      - /usr/src/app/node_modules
    ports:
      - '3003:3003'
    develop:
      watch:
        - path: ./apps/shipping
          target: /usr/src/app/apps/shipping
          action: sync

  rabbitmq:
    image: rabbitmq:4-management-alpine
    container_name: 'rabbitmq'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - default
      - rabbitmq_network

  mongo:
    image: mongo
    container_name: 'mongo'
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password123
    volumes:
      - 'mongodb_data:/data/db'
    ports:
      - '27017:27017'
    networks:
      - default

  # mongodb replica set
  # mongodb-primary:
  #   image: docker.io/bitnami/mongodb:8.0
  #   environment:
  #     - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
  #     - MONGODB_REPLICA_SET_MODE=primary
  #     - MONGODB_ROOT_PASSWORD=password123
  #     - MONGODB_REPLICA_SET_KEY=replicasetkey123
  #   volumes:
  #     - 'mongodb_master_data:/bitnami/mongodb'
  #   ports:
  #     - '27017:27017'

  # mongodb-secondary:
  #   image: docker.io/bitnami/mongodb:8.0
  #   depends_on:
  #     - mongodb-primary
  #   environment:
  #     - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
  #     - MONGODB_REPLICA_SET_MODE=secondary
  #     - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
  #     - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
  #     - MONGODB_REPLICA_SET_KEY=replicasetkey123

  # mongodb-arbiter:
  #   image: docker.io/bitnami/mongodb:8.0
  #   depends_on:
  #     - mongodb-primary
  #   environment:
  #     - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
  #     - MONGODB_REPLICA_SET_MODE=arbiter
  #     - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
  #     - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
  #     - MONGODB_REPLICA_SET_KEY=replicasetkey123

volumes:
  mongodb_data:
    driver: local

networks:
  rabbitmq_network:
    driver: bridge
